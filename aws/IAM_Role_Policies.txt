#
# The idea is to assign the lambdaLoggingBasic policy plus one of the taskList*
# policies to each role, then assign that role in lambda_functions_create.sh
#

# lambdaLoggingBasic
{
   "Version":"2012-10-17",
   "Statement":[
      {
         "Effect":"Allow",
         "Action":"logs:CreateLogGroup",
         "Resource":"arn:aws:logs:eu-west-1:312445988018:*"
      },
      {
         "Effect":"Allow",
         "Action":[
            "logs:CreateLogStream",
            "logs:PutLogEvents"
         ],
         "Resource":[
            "arn:aws:logs:eu-west-1:312445988018:log-group:[[logGroups]]:*"
         ]
      }
   ]
}

# taskListGet
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:dynamodb:eu-west-1:312445988018:table/taskListTable"
        }
    ]
}


# taskListAdd
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:PutItem"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:dynamodb:eu-west-1:312445988018:table/taskListTable"
    }
  ]
}

# taskListUpdate
Show Policy
 {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:dynamodb:eu-west-1:312445988018:table/taskListTable"
        }
    ]
}


# taskListDelete
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "dynamodb:DeleteItem"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:dynamodb:eu-west-1:312445988018:table/taskListTable"
        }
    ]
}
